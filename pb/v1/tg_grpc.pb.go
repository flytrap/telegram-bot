// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: tg.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TgBotServiceClient is the client API for TgBotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TgBotServiceClient interface {
	ImportData(ctx context.Context, opts ...grpc.CallOption) (TgBotService_ImportDataClient, error)
}

type tgBotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTgBotServiceClient(cc grpc.ClientConnInterface) TgBotServiceClient {
	return &tgBotServiceClient{cc}
}

func (c *tgBotServiceClient) ImportData(ctx context.Context, opts ...grpc.CallOption) (TgBotService_ImportDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TgBotService_ServiceDesc.Streams[0], "/tg.v1.TgBotService/ImportData", opts...)
	if err != nil {
		return nil, err
	}
	x := &tgBotServiceImportDataClient{stream}
	return x, nil
}

type TgBotService_ImportDataClient interface {
	Send(*DataItem) error
	Recv() (*ImportResponse, error)
	grpc.ClientStream
}

type tgBotServiceImportDataClient struct {
	grpc.ClientStream
}

func (x *tgBotServiceImportDataClient) Send(m *DataItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tgBotServiceImportDataClient) Recv() (*ImportResponse, error) {
	m := new(ImportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TgBotServiceServer is the server API for TgBotService service.
// All implementations must embed UnimplementedTgBotServiceServer
// for forward compatibility
type TgBotServiceServer interface {
	ImportData(TgBotService_ImportDataServer) error
	mustEmbedUnimplementedTgBotServiceServer()
}

// UnimplementedTgBotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTgBotServiceServer struct {
}

func (UnimplementedTgBotServiceServer) ImportData(TgBotService_ImportDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportData not implemented")
}
func (UnimplementedTgBotServiceServer) mustEmbedUnimplementedTgBotServiceServer() {}

// UnsafeTgBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TgBotServiceServer will
// result in compilation errors.
type UnsafeTgBotServiceServer interface {
	mustEmbedUnimplementedTgBotServiceServer()
}

func RegisterTgBotServiceServer(s grpc.ServiceRegistrar, srv TgBotServiceServer) {
	s.RegisterService(&TgBotService_ServiceDesc, srv)
}

func _TgBotService_ImportData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TgBotServiceServer).ImportData(&tgBotServiceImportDataServer{stream})
}

type TgBotService_ImportDataServer interface {
	Send(*ImportResponse) error
	Recv() (*DataItem, error)
	grpc.ServerStream
}

type tgBotServiceImportDataServer struct {
	grpc.ServerStream
}

func (x *tgBotServiceImportDataServer) Send(m *ImportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tgBotServiceImportDataServer) Recv() (*DataItem, error) {
	m := new(DataItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TgBotService_ServiceDesc is the grpc.ServiceDesc for TgBotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TgBotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tg.v1.TgBotService",
	HandlerType: (*TgBotServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportData",
			Handler:       _TgBotService_ImportData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tg.proto",
}
